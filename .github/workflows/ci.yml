name: CI/CD Pipeline - Accounting Frontend

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]

env:
  NODE_VERSION: '20'
  CACHE_KEY_PREFIX: 'accounting-frontend'

jobs:
  # Code Quality and Linting
  lint:
    name: ESLint & Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript type check
        run: npm run typecheck

      - name: Upload lint results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: lint-results
          path: |
            eslint-report.json
            tsc-errors.txt

  # Unit and Integration Tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 30

    strategy:
      matrix:
        test-group: [unit, integration]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create test results directory
        run: mkdir -p test-results coverage

      - name: Run unit tests
        if: matrix.test-group == 'unit'
        run: |
          npm run test:coverage -- \
            --run \
            --reporter=verbose \
            --reporter=junit \
            --outputFile.junit=./test-results/junit-unit.xml \
            src/**/*.{test,spec}.{ts,tsx} \
            --testNamePattern="^(?!.*integration).*"

      - name: Run integration tests
        if: matrix.test-group == 'integration'
        run: |
          npm run test:coverage -- \
            --run \
            --reporter=verbose \
            --reporter=junit \
            --outputFile.junit=./test-results/junit-integration.xml \
            --testNamePattern="integration"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-group }}
          path: |
            test-results/
            coverage/

      - name: Upload coverage to Codecov
        if: matrix.test-group == 'unit'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          flags: unittests
          name: accounting-frontend-coverage

  # Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate

      - name: Run dependency check
        run: |
          npx license-checker --summary > license-summary.txt
          npx audit-ci --moderate

  # Build Validation
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint, test]
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Verify build artifacts
        run: |
          ls -la dist/
          test -f dist/index.html
          test -d dist/assets

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  # Performance Testing (on main branch only)
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: Start preview server
        run: |
          npm run preview &
          sleep 10

      - name: Run performance tests
        run: |
          npx lighthouse http://localhost:4173 \
            --output=json \
            --output-path=./lighthouse-report.json \
            --chrome-flags="--headless"

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: lighthouse-report.json

  # Financial Data Validation Tests
  financial-validation:
    name: Financial Data Validation
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run financial calculation tests
        run: |
          npm test -- \
            --run \
            --testNamePattern="financial|calculation|tax|invoice|payment" \
            --reporter=verbose

      - name: Validate currency precision
        run: |
          npm test -- \
            --run \
            --testNamePattern="precision|rounding|decimal" \
            --reporter=verbose

  # Test Results Summary
  test-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [test, financial-validation]
    if: always()

    steps:
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-*
          merge-multiple: true

      - name: Publish test results
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Test Results Summary
          path: test-results/junit-*.xml
          reporter: java-junit
          fail-on-error: true

      - name: Generate coverage summary
        run: |
          echo "## Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Coverage |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|----------|" >> $GITHUB_STEP_SUMMARY
          if [ -f coverage/coverage-summary.json ]; then
            node -e "
              const fs = require('fs');
              const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json'));
              Object.entries(coverage).forEach(([file, data]) => {
                if (file !== 'total') {
                  console.log(\`| \${file} | \${data.lines.pct}% |\`);
                }
              });
            " >> $GITHUB_STEP_SUMMARY
          fi

  # Deployment (only on main/master branch)
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, test-summary, security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your deployment script here
          # Example: rsync, scp, or cloud provider CLI

      - name: Run smoke tests
        run: |
          echo "Running smoke tests against staging..."
          # Add smoke test commands here

  # Cleanup
  cleanup:
    name: Cleanup Artifacts
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()

    steps:
      - name: Cleanup old artifacts
        run: |
          echo "Cleaning up artifacts older than 7 days"
          # GitHub automatically cleans up artifacts based on retention policy