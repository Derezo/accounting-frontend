name: Frontend Validation

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  # Build validation - catches import errors, missing dependencies
  build-validation:
    runs-on: ubuntu-latest
    name: Build Validation

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: TypeScript compilation check
      run: npm run typecheck

    - name: Build production bundle
      run: npm run build

    - name: ESLint validation
      run: npm run lint

  # Import and dependency validation
  dependency-validation:
    runs-on: ubuntu-latest
    name: Dependency Validation

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run dependency validation tests
      run: npm run test:ci -- src/__tests__/dependency-validation.test.ts

    - name: Run import validation tests
      run: npm run test:ci -- src/__tests__/import-validation.test.ts

  # TypeScript validation
  typescript-validation:
    runs-on: ubuntu-latest
    name: TypeScript Validation

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run TypeScript validation tests
      run: npm run test:ci -- src/__tests__/typescript-validation.test.ts

  # Smoke tests - basic rendering validation
  smoke-tests:
    runs-on: ubuntu-latest
    name: Smoke Tests

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run smoke tests
      run: npm run test:smoke

  # Route validation
  route-validation:
    runs-on: ubuntu-latest
    name: Route Validation

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run route validation tests
      run: npm run test:ci -- src/__tests__/route-validation.test.tsx

  # API service validation
  api-validation:
    runs-on: ubuntu-latest
    name: API Service Validation

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run API service validation tests
      run: npm run test:ci -- src/__tests__/api-service-validation.test.ts

  # Comprehensive test suite
  comprehensive-tests:
    runs-on: ubuntu-latest
    name: Comprehensive Tests
    needs: [build-validation, dependency-validation, typescript-validation]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run all validation tests
      run: |
        npm run test:ci -- src/__tests__/build-validation.test.ts
        npm run test:ci -- src/__tests__/dependency-validation.test.ts
        npm run test:ci -- src/__tests__/import-validation.test.ts
        npm run test:ci -- src/__tests__/typescript-validation.test.ts
        npm run test:ci -- src/__tests__/api-service-validation.test.ts
        npm run test:smoke
        npm run test:ci -- src/__tests__/route-validation.test.tsx

    - name: Run unit tests with coverage
      run: npm run test:coverage

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: ./coverage
        fail_ci_if_error: false

  # Security and quality checks
  security-checks:
    runs-on: ubuntu-latest
    name: Security & Quality

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level=moderate

    - name: Check for duplicate dependencies
      run: npx npm-check-duplicates

    - name: Check bundle size
      run: npm run build && npx bundlesize

  # Performance validation
  performance-validation:
    runs-on: ubuntu-latest
    name: Performance Validation

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build for production
      run: npm run build

    - name: Check build output size
      run: |
        echo "Build output size:"
        du -sh dist/
        echo "JavaScript bundle sizes:"
        find dist -name "*.js" -exec ls -lh {} \;
        echo "CSS bundle sizes:"
        find dist -name "*.css" -exec ls -lh {} \;

    - name: Validate build artifacts
      run: |
        # Check that critical files exist
        test -f dist/index.html
        test -d dist/assets
        echo "Build artifacts validated successfully"

  # Matrix testing across different Node versions
  cross-platform-validation:
    runs-on: ${{ matrix.os }}
    name: Cross-platform Validation

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18, 20]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: TypeScript compilation
      run: npm run typecheck

    - name: Build application
      run: npm run build

    - name: Run critical tests
      run: npm run test:smoke

  # Final validation summary
  validation-summary:
    runs-on: ubuntu-latest
    name: Validation Summary
    needs: [
      build-validation,
      dependency-validation,
      typescript-validation,
      smoke-tests,
      route-validation,
      api-validation,
      comprehensive-tests,
      security-checks,
      performance-validation
    ]
    if: always()

    steps:
    - name: Validation Results
      run: |
        echo "=== Frontend Validation Summary ==="
        echo "Build Validation: ${{ needs.build-validation.result }}"
        echo "Dependency Validation: ${{ needs.dependency-validation.result }}"
        echo "TypeScript Validation: ${{ needs.typescript-validation.result }}"
        echo "Smoke Tests: ${{ needs.smoke-tests.result }}"
        echo "Route Validation: ${{ needs.route-validation.result }}"
        echo "API Validation: ${{ needs.api-validation.result }}"
        echo "Comprehensive Tests: ${{ needs.comprehensive-tests.result }}"
        echo "Security Checks: ${{ needs.security-checks.result }}"
        echo "Performance Validation: ${{ needs.performance-validation.result }}"

        # Fail if any critical validations failed
        if [[ "${{ needs.build-validation.result }}" != "success" ]]; then
          echo "❌ Build validation failed - blocking deployment"
          exit 1
        fi

        if [[ "${{ needs.dependency-validation.result }}" != "success" ]]; then
          echo "❌ Dependency validation failed - blocking deployment"
          exit 1
        fi

        if [[ "${{ needs.typescript-validation.result }}" != "success" ]]; then
          echo "❌ TypeScript validation failed - blocking deployment"
          exit 1
        fi

        echo "✅ All critical validations passed"